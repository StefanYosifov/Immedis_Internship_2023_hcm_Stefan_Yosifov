@using HCM.Common.Constants
@using HCM.Models.ViewModels.Countries
@using HCM.Models.ViewModels.Departments
@using HCM.Models.ViewModels.Positions
@using HCM.Models.ViewModels.Seniorities
@model HCM.Models.ViewModels.Employees.EmployeeGetEditModel
@{
    ViewData["Title"] = "Edit Employee";
}


<div class="container">
    <div class="row my-4">
        <div class="col-lg-4">
            <div class="profile-card-4 z-depth-3">
                <div class="card">
                    <div class="card-body text-center bg-primary rounded-top">
                        <div class="user-box">
                            <img style="width:199px" src="https://cdn-icons-png.flaticon.com/512/3789/3789820.png" alt="user avatar">
                        </div>
                        <h5 class="mb-1 text-white">@Model.Firstname @Model.Lastname</h5>
                        <h6 class="text-light"></h6>
                    </div>
                    <div class="card-body">
                        <ul class="list-group shadow-none">
                            <li class="list-group-item">
                                <div class="list-icon">
                                    <i class="fa fa-phone-square"></i>
                                </div>
                                <div class="list-details">
                                    <span>@Model.PhoneNumber</span>
                                </div>
                            </li>
                            <li class="list-group-item">
                                <div class="list-icon">
                                    <i class="fa fa-envelope"></i>
                                </div>
                                <div class="list-details">
                                    <span>@Model.Email</span>
                                </div>
                            </li>
                            <li class="list-group-item">
                                <div class="list-icon">
                                    <i class="fa fa-globe"></i>
                                </div>
                                <div class="list-details">
                                    <small>@Model.BirthDate.ToShortDateString()</small>
                                </div>
                            </li>
                        </ul>
                    </div>
                    <div class="card-footer text-center">
                        <a href="javascript:void()" class="btn-social btn-facebook waves-effect waves-light m-1">
                            <i class="fa fa-facebook"></i>
                        </a>
                        <a href="javascript:void()" class="btn-social btn-google-plus waves-effect waves-light m-1">
                            <i class="fa fa-google-plus"></i>
                        </a>
                        <a href="javascript:void()" class="list-inline-item btn-social btn-behance waves-effect waves-light">
                            <i class="fa fa-behance"></i>
                        </a>
                        <a href="javascript:void()" class="list-inline-item btn-social btn-dribbble waves-effect waves-light">
                            <i class="fa fa-dribbble"></i>
                        </a>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-8">
            <div class="card z-depth-3">
                <div class="card-body">
                    <ul class="nav nav-pills nav-pills-primary nav-justified">
                        <li class="nav-item">
                            <a href="javascript:void();" data-target="#profile" data-toggle="pill" class="nav-link active show">
                                <i class="icon-user"></i> <span class="hidden-xs">Profile</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="javascript:void();" data-target="#messages" data-toggle="pill" class="nav-link">
                                <i class="icon-envelope-open"></i> <span class="hidden-xs">Tasks</span>
                            </a>
                        </li>
                        <li class="nav-item">
                            <a href="javascript:void();" data-target="#edit" data-toggle="pill" class="nav-link">
                                <i class="icon-note"></i> <span class="hidden-xs">Edit</span>
                            </a>
                        </li>
                    </ul>
                    <div class="tab-content p-3">
                        <div class="tab-pane active show" id="profile">
                            <h5 class="mb-3">User Profile</h5>
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>About</h6>
                                    <p>
                                        @Model.Firstname @Model.Lastname
                                    </p>
                                    <p>
                                        @foreach (var position in Model.Positions)
                                        {
                                            <span>Working as @position.Name</span>
                                        }
                                        </>
                                    <h6>Hobbies</h6>
                                    <p>
                                        Indie music, skiing and hiking. I love the great outdoors.
                                    </p>
                                </div>
                                <div class="col-md-12">
                                    <h5 class="mt-2 mb-3"><span class="fa fa-clock-o ion-clock float-right"></span> Recent payments</h5>
                                    <table class="table table-hover table-striped">
                                        <tbody id="payroll">
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                        <div class="tab-pane" id="messages">
                            @await Html.PartialAsync("_CreateTasksPartial",Model.Tasks)
                            <table class="table table-hover table-striped">
                                <thead>
                                    <tr>
                                        <th>Task Name</th>
                                        <th>Description</th>
                                        <th>Due Date</th>
                                        <th>Employee ID</th>
                                        <th>Issuer ID</th>
                                        <th>Priority</th>
                                        <th>Status</th>
                                        <th>Mark as complete</th>
                                    </tr>
                                </thead>
                                <tbody id="tasks" class="">
                                </tbody>
                            </table>

                            <ul id="pagination-list" class="pagination">
                            </ul>

                        </div>
                        <div class="tab-pane" id="edit">
                            <form id="editForm">
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Firstname</label>
                                    <div class="col-lg-9">
                                        <input name="Firstname" class="form-control" type="text" value="@Model.Firstname">
                                    </div>
                                </div>
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Lastname</label>
                                    <div class="col-lg-9">
                                        <input name="LastName" class="form-control" type="text" value="@Model.Lastname">
                                    </div>
                                </div>
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Username</label>
                                    <div class="col-lg-9">
                                        <input name="Username" class="form-control" type="text" value="@Model.Username">
                                    </div>
                                </div>
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Email</label>
                                    <div class="col-lg-9">
                                        <input name="Email" class="form-control" type="email" value="@Model.Email">
                                    </div>
                                </div>
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">@Model.PhoneNumber</label>
                                    <div class="col-lg-9">
                                        <input name="PhoneNumber" class="form-control" type="text" value="@Model.PhoneNumber">
                                    </div>
                                </div>
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Date of birth</label>
                                    <div class="col-lg-9">
                                        <div class="input-group date">
                                            <input name="BirthDate" type="date" class="form-control" id="BirthDate" value="@Model.BirthDate.ToString("yyyy-MM-dd")"
                                                   min="@DateTime.Today.AddYears(-ValidationConstants.EmployeeConstants.MaxEmployeeAge).ToString("yyyy-MM-dd")"
                                                   max="@DateTime.Today.AddYears(-ValidationConstants.EmployeeConstants.MinEmployeeAge).ToString("yyyy-MM-dd")" />
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label">Nationality</label>
                                    <select name="NationalityId" id="NationalityId" asp-for="NationalityId"
                                            asp-items="new SelectList(Model.Nationalities, nameof(CountryViewModel.Id), nameof(CountryViewModel.Name))"
                                            class="form-control">
                                    </select>
                                </div>
                                @{
                                    if (User.IsInRole("HR"))
                                    {
                                        <div class="form-group row my-2">
                                            <label class="col-lg-3 col-form-label form-control-label">Department</label>
                                            <select name="DepartmentId" id="DepartmentId" asp-for="DepartmentId"
                                                    asp-items="new SelectList(Model.Deparments, nameof(DepartmentViewModel.DepartmentId), nameof(DepartmentViewModel.Name))" class="form-control">
                                            </select>
                                        </div>
                                        <div class="form-group row my-2">
                                            <label class="col-lg-3 col-form-label form-control-label">Position</label>
                                            <select name="PositionId" id="PositionId" asp-for="PositionId"
                                                    asp-items="new SelectList(Model.Positions, nameof(PositionViewModel.Id), nameof(PositionViewModel.Name))" class="form-control">
                                            </select>
                                        </div>
                                        <div class="form-group row my-2">
                                            <label class="col-lg-3 col-form-label form-control-label">Seniority</label>
                                            <select name="SeniorityId" asp-for="SeniorityId"
                                                    asp-items="new SelectList(Model.Senioritys, nameof(SeniorityViewModel.Id), nameof(SeniorityViewModel.Name))" class="form-control">
                                            </select>
                                        </div>
                                    }
                                }
                                <div class="form-group row my-2">
                                    <label class="col-lg-3 col-form-label form-control-label"></label>
                                    <div class="col-lg-9">
                                        <input type="reset" class="btn btn-secondary" value="Cancel">
                                        <input id="btnsubmit" class="btn btn-secondary" type="button" value="Submit" />
                                    </div>
                                </div>
                            </form>
                            <hr class="mt-5" />
                            <div class="d-flex justify-content-center mt-4">
                                <button class="btn btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseWidthExample" aria-expanded="false" aria-controls="collapseWidthExample">
                                    Change password
                                </button>
                            </div>
                            <div class="d-flex justify-content-center mt-3">
                                <div class="collapse collapse-horizontal" id="collapseWidthExample">
                                    <div class="card card-body" style="width: 300px;">
                                        <form id="passwordChange">
                                            <div class="mb-3">
                                                <label for="oldPassword" class="form-label">Old password</label>
                                                <input name="oldPassword" type="password" class="form-control" id="oldPassword" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="newPassword" class="form-label">New password</label>
                                                <input name="newPassword" type="password" class="form-control" id="newPassword" />
                                            </div>
                                            <div class="mb-3">
                                                <label for="confirmNewPassword" class="form-label">Confirm new password</label>
                                                <input name="confirmNewPassword" type="password" class="form-control" id="confirmNewPassword" />
                                            </div>

                                            <input id="changePassword" type="button" value="Submit" />
                                        </form>
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<style>
    td {
        font-size: 14px;
    }
</style>

@if (false)
{
    <script src="~/lib/jquery/dist/jquery.js" type="text/javascript"></script>
}

<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<link rel="stylesheet" href="~/css/button.css" />
<link rel="stylesheet" href="~/css/tables.css" />
<link rel="stylesheet" href="~/css/inputs.css" />

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script type="module" src="~/js/abstractAjax.js"></script>

@section Scripts
    {
    <script type="text/javascript">
        const token = "Bearer " + localStorage.getItem("Authorization")
        const tasksUrl = "https://localhost:7153/tasks";
        const currentUrl = window.location.pathname;
        const id = currentUrl.substring(currentUrl.lastIndexOf('/') + 1);

        function ChangePassword() {
            $("#changePassword").click(function (e) {
                const url = "https://localhost:7153/identity/ChangePass"
                e.preventDefault();

                let newPassword = $("#newPassword").val();
                let confirmNewPassword = $("#confirmNewPassword").val();

                console.log(token);
                if (newPassword !== confirmNewPassword) {
                    alert("New password and Confirm new password do not match.");
                    return;
                }

                let oldPassword = $("#oldPassword").val();

                var formData = {
                    oldPassword: oldPassword,
                    newPassword: newPassword,
                };

                $.ajax({
                    url: url,
                    type: "PUT",
                    data: JSON.stringify(formData),
                    contentType: 'application/json',
                    headers: { "Authorization": token },
                    success: function (data) {
                        Toastify({
                            text: data,
                            duration: 3000,
                            newWindow: true,
                            close: true,
                            gravity: "top",
                            position: "right",
                            stopOnFocus: true,
                            style: {
                                background: "linear-gradient(to right, #00b09b, #96c93d)",
                            },
                        }).showToast();

                        let newPassword = $("#newPassword").val("");
                        let confirmNewPassword = $("#confirmNewPassword").val("");
                        let oldPassword = $("#oldPassword").val("");
                    },
                    error: function (data) {
                        Toastify({
                            text: data,
                            duration: 3000,
                            newWindow: true,
                            close: true,
                            gravity: "top",
                            position: "right",
                            stopOnFocus: true,
                            style: {
                                background: "linear-gradient(to right, #90b09b, #96c93d)",
                            },
                        }).showToast();

                        let newPassword = $("#newPassword").val("");
                        let confirmNewPassword = $("#confirmNewPassword").val("");
                        let oldPassword = $("#oldPassword").val("");
                    }
                })
            })
        }
        function ShowTasks(page) {
            const tasks = $('#tasks');
            $.ajax({
                url: tasksUrl + "/pagination",
                type: "Get",
                headers: { "Authorization": token },
                data: { "EmployeeId": id, "Page": page },
                success: function (data) {
                    console.log(data);
                    tasks.empty();
                    $.each(data.tasks, function (index, task) {
                        const newRow = $('<tr>');
                        newRow.append('<td>' + task.taskName + '</td>');
                        newRow.append('<td>' + task.description + '</td>');
                        newRow.append('<td>' + task.dueDate.split('T')[0] + '</td>');
                        newRow.append('<td>' + task.employeeId + '</td>');
                        newRow.append('<td>' + task.issuerId + '</td>');
                        newRow.append('<td>Priority: ' + task.priority.priorityName + '</td>');
                        newRow.append('<td>Status: ' + task.status.statusName + '</td>');

                        if (task.status.statusName === "Completed") {
                            const completed = $(`<td><button>Completed already :)</button></td>`);
                            newRow.append(completed);
                        } else {
                            const completeButton = $(`<td><button value="${task.id}">Complete</button></td>`);

                            completeButton.click(function () {
                                $.ajax({
                                    url: tasksUrl + "/complete",
                                    type: "Put",
                                    headers: { "Authorization": token },
                                    data: JSON.stringify({ id: task.id }),
                                    contentType: 'application/json',
                                    success: function (data) {

                                    }
                                })
                            });

                            newRow.append(completeButton);
                        }
                        tasks.append(newRow);
                    });


                    GeneratePagination(data.page, data.totalPages);
                }
            })
        }
        function GeneratePagination(currentPage, lastPage) {
            const threePagesFromNow = currentPage + 3;
            const pages = $("#pagination-list");


            if (currentPage > 1) {
                pages.append(`<li class="page-item"><a class="page-link" href="#" data-page="${currentPage - 1}">Previous</a></li>`);
            } else {
                pages.append(`<li class="page-item disabled"><a class="page-link" href="#" tabindex="-1">Previous</a></li>`);
            }
            for (let i = currentPage - 1; i < threePagesFromNow; i++) {
                if (i <= 0) {
                    continue;
                }

                if (i > lastPage) {
                    break;
                }

                const page = `<li class="page-item"><a class="page-link" href="#" data-page="${i}">${i}</a></li>`;
                pages.append(page);
            }



            // NEXT
            if (currentPage < lastPage) {
                pages.append(`<li class="page-item"><a class="page-link" href="#" data-page="${currentPage}">Next</a></li>`);
            } else {
                pages.append(`<li class="page-item disabled"><a class="page-link" href="#" tabindex="-1">Next</a></li>`);
            }

            pages.find('a.page-link').click(function (e) {
                e.preventDefault();
                pages.empty();
                let clickedPage = $(this).data('page');
                ShowTasks(clickedPage);
            });

        }
        function CreateTask() {
            $("#saveTaskBtn").click(function () {
                console.log(`click`);

                var taskName = $("#taskName").val();
                var description = $("#description").val();
                var dueDate = $("#dueDate").val();
                var priority = $("#priority option:selected").val();
                var status = $("#status option:selected").val();


                var data = {
                    employeeId: id,
                    taskName: taskName,
                    description: description,
                    dueDate: dueDate,
                    priorityId: priority,
                    statusId: status
                };

                $.ajax({
                    url: tasksUrl + "/create",
                    type: "Post",
                    headers: { "Authorization": token },
                    data: JSON.stringify(data),
                    contentType: 'application/json',
                    success: function (data) {

                    }
                })

            });
        }
        function GetEmployeesPayroll(){

            const payrollTable = $("#payroll");

            $.ajax({
                url: `https://localhost:7153/payroll/employee/details?employeeId=${id}`,
                type:"Get",
                headers: { "Authorization": token },
                success: function (data) {
                    $.each(data, function (_, employee) {
                        payrollTable.append(`
                    <tr>
                        <td>
                            You have received ${employee.received} for the period of ${employee.startDate} - ${employee.endDate}
                        </td>
                    </tr>
                `);
                    });
                }

            })
        }

        $(document).ready(function () {
            ChangePassword();
            ShowTasks();
            CreateTask();
            GetEmployeesPayroll();
            $("#DepartmentId").on("change", function () {
                $("#PositionId").val('');
                $("#SeniorityId").val('');

                let selectedDepartmentId = $(this).val();
                let url = " https://localhost:7153/departments/positions/" + selectedDepartmentId;
                console.log(url);

                $.ajax({
                    url: url,
                    type: "GET",
                    headers: { "Authorization": token },
                    success: function (data) {
                        let arguments = "";
                        for (let i = 0; i < data.length; i++) {
                            arguments += '<option value="' + data[i].id + '">' + data[i].name + '</option>';
                        }
                        $("#PositionId").html(arguments);
                    }
                });
            });

            $("#PositionId").on("change", function () {
                $("#SeniorityId").val('');

                let selectedPositionId = $(this).val();
                let url = "https://localhost:7153/departments/seniorities/" + selectedPositionId;
                console.log(url);

                $.ajax({
                    url: url,
                    type: "GET",
                    headers: { "Authorization": "Bearer " + localStorage.getItem("Authorization") },
                    success: function (data) {
                        let arguments = "";
                        for (let i = 0; i < data.length; i++) {
                            arguments += '<option value="' + data[i].id + '">' + data[i].name + '</option>';
                        }
                        $("#SeniorityId").html(arguments);
                    }
                });
            });


            $("#btnsubmit").click(function (e) {
                var formData = $("#editForm").serialize();
                let url = "https://localhost:7153/employees/edit/" + id;

                $.ajax({
                    type: 'PUT',
                    url: url,
                    data: formData,
                    headers: { "Authorization": token },
                    success: function (data) {
                        Toastify({
                            text: data,
                            duration: 3000,
                            newWindow: true,
                            close: true,
                            gravity: "top",
                            position: "right",
                            stopOnFocus: true,
                            style: {
                                background: "linear-gradient(to right, #00b09b, #96c93d)",
                            },
                        }).showToast();
                    },
                    error: function (xhr, status, error) {

                    }
                });
            });

        });

    </script>
}